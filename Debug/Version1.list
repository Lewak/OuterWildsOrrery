
Version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006150  08006150  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006150  08006150  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000018  08006170  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08006170  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015080  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003168  00000000  00000000  000350c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00038230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00039370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beb6  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015acb  00000000  00000000  0005623e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e890  00000000  00000000  0006bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000fa5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	0800599c 	.word	0x0800599c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	0800599c 	.word	0x0800599c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <_Z9ARGB_Initv>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000936:	f003 fafd 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 800093a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <_Z9ARGB_Initv+0xd8>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000944:	2b00      	cmp	r3, #0
 8000946:	d101      	bne.n	800094c <_Z9ARGB_Initv+0x1c>
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <_Z9ARGB_Initv+0x1e>
 800094c:	2302      	movs	r3, #2
 800094e:	461a      	mov	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <_Z9ARGB_Initv+0xdc>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <_Z9ARGB_Initv+0xe0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	b29b      	uxth	r3, r3
 8000972:	3b01      	subs	r3, #1
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <_Z9ARGB_Initv+0xe0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <_Z9ARGB_Initv+0xe0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2201      	movs	r2, #1
 8000982:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fd25 	bl	80003d4 <__aeabi_ui2d>
 800098a:	a31b      	add	r3, pc, #108	; (adr r3, 80009f8 <_Z9ARGB_Initv+0xc8>)
 800098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000990:	f7ff fd9a 	bl	80004c8 <__aeabi_dmul>
 8000994:	4602      	mov	r2, r0
 8000996:	460b      	mov	r3, r1
 8000998:	4610      	mov	r0, r2
 800099a:	4619      	mov	r1, r3
 800099c:	f7ff ffa6 	bl	80008ec <__aeabi_d2uiz>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	3b01      	subs	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <_Z9ARGB_Initv+0xe4>)
 80009aa:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fd11 	bl	80003d4 <__aeabi_ui2d>
 80009b2:	a313      	add	r3, pc, #76	; (adr r3, 8000a00 <_Z9ARGB_Initv+0xd0>)
 80009b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b8:	f7ff fd86 	bl	80004c8 <__aeabi_dmul>
 80009bc:	4602      	mov	r2, r0
 80009be:	460b      	mov	r3, r1
 80009c0:	4610      	mov	r0, r2
 80009c2:	4619      	mov	r1, r3
 80009c4:	f7ff ff92 	bl	80008ec <__aeabi_d2uiz>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3b01      	subs	r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_Z9ARGB_Initv+0xe8>)
 80009d2:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_Z9ARGB_Initv+0xec>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <_Z9ARGB_Initv+0xe0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2201      	movs	r2, #1
 80009e0:	2108      	movs	r1, #8
 80009e2:	4618      	mov	r0, r3
 80009e4:	f004 f9f8 	bl	8004dd8 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80009e8:	2001      	movs	r0, #1
 80009ea:	f001 fcf7 	bl	80023dc <HAL_Delay>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	eb851eb8 	.word	0xeb851eb8
 80009fc:	3fdeb851 	.word	0x3fdeb851
 8000a00:	9999999a 	.word	0x9999999a
 8000a04:	3fc99999 	.word	0x3fc99999
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	014f8b59 	.word	0x014f8b59
 8000a10:	20000560 	.word	0x20000560
 8000a14:	20000034 	.word	0x20000034
 8000a18:	20000035 	.word	0x20000035
 8000a1c:	200000fe 	.word	0x200000fe

08000a20 <_Z10ARGB_Clearv>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f865 	bl	8000af8 <_Z12ARGB_FillRGBhhh>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <_Z11ARGB_SetRGBthhh>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000a34:	b490      	push	{r4, r7}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	4603      	mov	r3, r0
 8000a48:	717b      	strb	r3, [r7, #5]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	713b      	strb	r3, [r7, #4]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <_Z11ARGB_SetRGBthhh+0x30>
        u16_t _i = i / NUM_PIXELS;
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000a5c:	88fa      	ldrh	r2, [r7, #6]
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <_Z11ARGB_SetRGBthhh+0xbc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a74:	797a      	ldrb	r2, [r7, #5]
 8000a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a7a:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <_Z11ARGB_SetRGBthhh+0xbc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	3301      	adds	r3, #1
 8000a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a8c:	793a      	ldrb	r2, [r7, #4]
 8000a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a92:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <_Z11ARGB_SetRGBthhh+0xbc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa4:	78fa      	ldrb	r2, [r7, #3]
 8000aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aaa:	70fb      	strb	r3, [r7, #3]
    g = scale8(g, 0xB0);
    b = scale8(b, 0xF0);
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8000aac:	797b      	ldrb	r3, [r7, #5]
 8000aae:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8000ab0:	793b      	ldrb	r3, [r7, #4]
 8000ab2:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <_Z11ARGB_SetRGBthhh+0xc0>)
 8000ac2:	7b7a      	ldrb	r2, [r7, #13]
 8000ac4:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000ac6:	88fa      	ldrh	r2, [r7, #6]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4908      	ldr	r1, [pc, #32]	; (8000af4 <_Z11ARGB_SetRGBthhh+0xc0>)
 8000ad2:	7b3a      	ldrb	r2, [r7, #12]
 8000ad4:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	4904      	ldr	r1, [pc, #16]	; (8000af4 <_Z11ARGB_SetRGBthhh+0xc0>)
 8000ae2:	7afa      	ldrb	r2, [r7, #11]
 8000ae4:	54ca      	strb	r2, [r1, r3]
#endif
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc90      	pop	{r4, r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000038 	.word	0x20000038

08000af8 <_Z12ARGB_FillRGBhhh>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	460b      	mov	r3, r1
 8000b04:	71bb      	strb	r3, [r7, #6]
 8000b06:	4613      	mov	r3, r2
 8000b08:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	81fb      	strh	r3, [r7, #14]
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf0c      	ite	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	2300      	movne	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00c      	beq.n	8000b3a <_Z12ARGB_FillRGBhhh+0x42>
        ARGB_SetRGB(i, r, g, b);
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	b298      	uxth	r0, r3
 8000b24:	797b      	ldrb	r3, [r7, #5]
 8000b26:	79ba      	ldrb	r2, [r7, #6]
 8000b28:	79f9      	ldrb	r1, [r7, #7]
 8000b2a:	f7ff ff83 	bl	8000a34 <_Z11ARGB_SetRGBthhh>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	3301      	adds	r3, #1
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	81fb      	strh	r3, [r7, #14]
 8000b38:	e7e9      	b.n	8000b0e <_Z12ARGB_FillRGBhhh+0x16>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_Z9ARGB_Showv>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8000b4a:	4b88      	ldr	r3, [pc, #544]	; (8000d6c <_Z9ARGB_Showv+0x228>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8000b50:	4b87      	ldr	r3, [pc, #540]	; (8000d70 <_Z9ARGB_Showv+0x22c>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d104      	bne.n	8000b64 <_Z9ARGB_Showv+0x20>
 8000b5a:	4b86      	ldr	r3, [pc, #536]	; (8000d74 <_Z9ARGB_Showv+0x230>)
 8000b5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d001      	beq.n	8000b68 <_Z9ARGB_Showv+0x24>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <_Z9ARGB_Showv+0x26>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <_Z9ARGB_Showv+0x2e>
        return ARGB_BUSY;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e15e      	b.n	8000e30 <_Z9ARGB_Showv+0x2ec>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	bf94      	ite	ls
 8000b7e:	2301      	movls	r3, #1
 8000b80:	2300      	movhi	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f000 80a8 	beq.w	8000cda <_Z9ARGB_Showv+0x196>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <_Z9ARGB_Showv+0x234>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dd04      	ble.n	8000bac <_Z9ARGB_Showv+0x68>
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <_Z9ARGB_Showv+0x238>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	e003      	b.n	8000bb4 <_Z9ARGB_Showv+0x70>
 8000bac:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <_Z9ARGB_Showv+0x23c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4b72      	ldr	r3, [pc, #456]	; (8000d84 <_Z9ARGB_Showv+0x240>)
 8000bbc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000bc0:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <_Z9ARGB_Showv+0x234>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	dd04      	ble.n	8000be2 <_Z9ARGB_Showv+0x9e>
 8000bd8:	4b68      	ldr	r3, [pc, #416]	; (8000d7c <_Z9ARGB_Showv+0x238>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	e003      	b.n	8000bea <_Z9ARGB_Showv+0xa6>
 8000be2:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <_Z9ARGB_Showv+0x23c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3308      	adds	r3, #8
 8000bf0:	4a64      	ldr	r2, [pc, #400]	; (8000d84 <_Z9ARGB_Showv+0x240>)
 8000bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000bf6:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <_Z9ARGB_Showv+0x234>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	dd04      	ble.n	8000c18 <_Z9ARGB_Showv+0xd4>
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <_Z9ARGB_Showv+0x238>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	e003      	b.n	8000c20 <_Z9ARGB_Showv+0xdc>
 8000c18:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <_Z9ARGB_Showv+0x23c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3310      	adds	r3, #16
 8000c26:	4a57      	ldr	r2, [pc, #348]	; (8000d84 <_Z9ARGB_Showv+0x240>)
 8000c28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000c2c:	4b52      	ldr	r3, [pc, #328]	; (8000d78 <_Z9ARGB_Showv+0x234>)
 8000c2e:	78db      	ldrb	r3, [r3, #3]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	dd04      	ble.n	8000c4e <_Z9ARGB_Showv+0x10a>
 8000c44:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <_Z9ARGB_Showv+0x238>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	e003      	b.n	8000c56 <_Z9ARGB_Showv+0x112>
 8000c4e:	4b4c      	ldr	r3, [pc, #304]	; (8000d80 <_Z9ARGB_Showv+0x23c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <_Z9ARGB_Showv+0x240>)
 8000c5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <_Z9ARGB_Showv+0x234>)
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	dd04      	ble.n	8000c84 <_Z9ARGB_Showv+0x140>
 8000c7a:	4b40      	ldr	r3, [pc, #256]	; (8000d7c <_Z9ARGB_Showv+0x238>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4619      	mov	r1, r3
 8000c82:	e003      	b.n	8000c8c <_Z9ARGB_Showv+0x148>
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <_Z9ARGB_Showv+0x23c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	3320      	adds	r3, #32
 8000c92:	4a3c      	ldr	r2, [pc, #240]	; (8000d84 <_Z9ARGB_Showv+0x240>)
 8000c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <_Z9ARGB_Showv+0x234>)
 8000c9a:	795b      	ldrb	r3, [r3, #5]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd04      	ble.n	8000cba <_Z9ARGB_Showv+0x176>
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <_Z9ARGB_Showv+0x238>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	e003      	b.n	8000cc2 <_Z9ARGB_Showv+0x17e>
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <_Z9ARGB_Showv+0x23c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	3328      	adds	r3, #40	; 0x28
 8000cc8:	4a2e      	ldr	r2, [pc, #184]	; (8000d84 <_Z9ARGB_Showv+0x240>)
 8000cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e74d      	b.n	8000b76 <_Z9ARGB_Showv+0x32>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80a1 	beq.w	8000e28 <_Z9ARGB_Showv+0x2e4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	bf0c      	ite	eq
 8000cf2:	2301      	moveq	r3, #1
 8000cf4:	2300      	movne	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <_Z9ARGB_Showv+0x1be>
                DMA_Send_Stat = HAL_BUSY;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	73fb      	strb	r3, [r7, #15]
                continue;
 8000d00:	e091      	b.n	8000e26 <_Z9ARGB_Showv+0x2e2>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	bf0c      	ite	eq
 8000d0e:	2301      	moveq	r3, #1
 8000d10:	2300      	movne	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d022      	beq.n	8000d5e <_Z9ARGB_Showv+0x21a>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <_Z9ARGB_Showv+0x248>)
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <_Z9ARGB_Showv+0x24c>)
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <_Z9ARGB_Showv+0x250>)
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000d3c:	4911      	ldr	r1, [pc, #68]	; (8000d84 <_Z9ARGB_Showv+0x240>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <_Z9ARGB_Showv+0x244>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000d44:	461a      	mov	r2, r3
 8000d46:	2330      	movs	r3, #48	; 0x30
 8000d48:	f001 fcd4 	bl	80026f4 <HAL_DMA_Start_IT>
 8000d4c:	4603      	mov	r3, r0
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf14      	ite	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	2300      	moveq	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d01d      	beq.n	8000d98 <_Z9ARGB_Showv+0x254>
 8000d5c:	e002      	b.n	8000d64 <_Z9ARGB_Showv+0x220>
                DMA_Send_Stat = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
                continue;
 8000d62:	e060      	b.n	8000e26 <_Z9ARGB_Showv+0x2e2>
                DMA_Send_Stat = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
                continue;
 8000d68:	e05d      	b.n	8000e26 <_Z9ARGB_Showv+0x2e2>
 8000d6a:	bf00      	nop
 8000d6c:	200000fe 	.word	0x200000fe
 8000d70:	200000fc 	.word	0x200000fc
 8000d74:	20000638 	.word	0x20000638
 8000d78:	20000038 	.word	0x20000038
 8000d7c:	20000034 	.word	0x20000034
 8000d80:	20000035 	.word	0x20000035
 8000d84:	2000003c 	.word	0x2000003c
 8000d88:	20000560 	.word	0x20000560
 8000d8c:	08000e49 	.word	0x08000e49
 8000d90:	08001159 	.word	0x08001159
 8000d94:	0800485b 	.word	0x0800485b
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000da6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <_Z9ARGB_Showv+0x2f8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <_Z9ARGB_Showv+0x288>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dca:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <_Z9ARGB_Showv+0x2f8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d009      	beq.n	8000dea <_Z9ARGB_Showv+0x2a6>
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dde:	d004      	beq.n	8000dea <_Z9ARGB_Showv+0x2a6>
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <_Z9ARGB_Showv+0x2fc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d111      	bne.n	8000e0e <_Z9ARGB_Showv+0x2ca>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b06      	cmp	r3, #6
 8000dfa:	d011      	beq.n	8000e20 <_Z9ARGB_Showv+0x2dc>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e008      	b.n	8000e20 <_Z9ARGB_Showv+0x2dc>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_Z9ARGB_Showv+0x2f4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0201 	orr.w	r2, r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e000      	b.n	8000e22 <_Z9ARGB_Showv+0x2de>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8000e20:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8000e26:	e75a      	b.n	8000cde <_Z9ARGB_Showv+0x19a>
        }
        BUF_COUNTER = 2;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <_Z9ARGB_Showv+0x300>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8000e2e:	2302      	movs	r3, #2
    }
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000560 	.word	0x20000560
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	40000400 	.word	0x40000400
 8000e44:	200000fc 	.word	0x200000fc

08000e48 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a7c      	ldr	r2, [pc, #496]	; (800104c <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x204>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	f040 816f 	bne.w	800113e <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2f6>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a7b      	ldr	r2, [pc, #492]	; (8001050 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x208>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f040 816a 	bne.w	800113e <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2f6>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8000e6a:	4b7a      	ldr	r3, [pc, #488]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf0c      	ite	eq
 8000e74:	2301      	moveq	r3, #1
 8000e76:	2300      	movne	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 8161 	bne.w	8001142 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2fa>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d10b      	bne.n	8000ea2 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x5a>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d136      	bne.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000ea0:	e031      	b.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d10b      	bne.n	8000ec4 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x7c>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d125      	bne.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000ec2:	e020      	b.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d10b      	bne.n	8000ee6 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x9e>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d114      	bne.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ee4:	e00f      	b.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d10a      	bne.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xbe>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8000f06:	4b53      	ldr	r3, [pc, #332]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8081 	beq.w	800101e <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x1d6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	72fb      	strb	r3, [r7, #11]
 8000f20:	7afb      	ldrb	r3, [r7, #11]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	bf94      	ite	ls
 8000f28:	2301      	movls	r3, #1
 8000f2a:	2300      	movhi	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d06d      	beq.n	800100e <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x1c6>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f32:	4b48      	ldr	r3, [pc, #288]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x210>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dd04      	ble.n	8000f62 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x11a>
 8000f58:	4b40      	ldr	r3, [pc, #256]	; (800105c <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x214>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	e003      	b.n	8000f6a <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x122>
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x218>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3318      	adds	r3, #24
 8000f70:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x21c>)
 8000f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a34      	ldr	r2, [pc, #208]	; (8001058 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x210>)
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	dd04      	ble.n	8000fa8 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x160>
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x214>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	e003      	b.n	8000fb0 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x168>
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x218>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3320      	adds	r3, #32
 8000fb6:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x21c>)
 8000fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	4a22      	ldr	r2, [pc, #136]	; (8001058 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x210>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd04      	ble.n	8000fee <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x1a6>
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x214>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	e003      	b.n	8000ff6 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x1ae>
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x218>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3328      	adds	r3, #40	; 0x28
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x21c>)
 8000ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001002:	7afb      	ldrb	r3, [r7, #11]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	e788      	b.n	8000f20 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0xd8>
#endif
        }
        BUF_COUNTER++;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 800101a:	801a      	strh	r2, [r3, #0]
 800101c:	e08b      	b.n	8001136 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2ee>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01c      	beq.n	800106c <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x224>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001032:	2260      	movs	r2, #96	; 0x60
 8001034:	2100      	movs	r1, #0
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x220>)
 8001038:	f004 fca8 	bl	800598c <memset>
        BUF_COUNTER++;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x20c>)
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	e074      	b.n	8001136 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2ee>
 800104c:	20000638 	.word	0x20000638
 8001050:	20000560 	.word	0x20000560
 8001054:	200000fc 	.word	0x200000fc
 8001058:	20000038 	.word	0x20000038
 800105c:	20000034 	.word	0x20000034
 8001060:	20000035 	.word	0x20000035
 8001064:	2000003c 	.word	0x2000003c
 8001068:	2000009c 	.word	0x2000009c
    } else { // if END of transfer
        BUF_COUNTER = 0;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x304>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001080:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fbce 	bl	8002828 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x308>)
 8001092:	4293      	cmp	r3, r2
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d021      	beq.n	80010e4 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x29c>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a1a      	ldr	r2, [r3, #32]
 80010a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d014      	beq.n	80010e4 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x29c>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	f240 4344 	movw	r3, #1092	; 0x444
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x29c>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf0c      	ite	eq
 80010f4:	2301      	moveq	r3, #1
 80010f6:	2300      	movne	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d014      	beq.n	8001128 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2e0>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	f240 4344 	movw	r3, #1092	; 0x444
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2e0>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST = ARGB_READY;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x30c>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	771a      	strb	r2, [r3, #28]
 800113c:	e002      	b.n	8001144 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2fc>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800113e:	bf00      	nop
 8001140:	e000      	b.n	8001144 <_ZL26ARGB_TIM_DMADelayPulseCpltP19__DMA_HandleTypeDef+0x2fc>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001142:	bf00      	nop
}
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000fc 	.word	0x200000fc
 8001150:	40012c00 	.word	0x40012c00
 8001154:	200000fe 	.word	0x200000fe

08001158 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a5e      	ldr	r2, [pc, #376]	; (80012e4 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x18c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	f040 80b3 	bne.w	80012d6 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x17e>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a5d      	ldr	r2, [pc, #372]	; (80012e8 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x190>)
 8001174:	4293      	cmp	r3, r2
 8001176:	f040 80ae 	bne.w	80012d6 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x17e>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 80a5 	bne.w	80012da <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x182>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001190:	4b56      	ldr	r3, [pc, #344]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8081 	beq.w	80012a8 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x150>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	bf94      	ite	ls
 80011b2:	2301      	movls	r3, #1
 80011b4:	2300      	movhi	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d06d      	beq.n	8001298 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x140>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x198>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dd04      	ble.n	80011ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x94>
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x19c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	e003      	b.n	80011f4 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x9c>
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	7afb      	ldrb	r3, [r7, #11]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a4>)
 80011fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	3301      	adds	r3, #1
 8001210:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x198>)
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001224:	2b00      	cmp	r3, #0
 8001226:	dd04      	ble.n	8001232 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0xda>
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x19c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4619      	mov	r1, r3
 8001230:	e003      	b.n	800123a <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0xe2>
 8001232:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4619      	mov	r1, r3
 800123a:	7afb      	ldrb	r3, [r7, #11]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	3308      	adds	r3, #8
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a4>)
 8001242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3302      	adds	r3, #2
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x198>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	2b00      	cmp	r3, #0
 800126c:	dd04      	ble.n	8001278 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x120>
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x19c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	e003      	b.n	8001280 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x128>
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	3310      	adds	r3, #16
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a4>)
 8001288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	72fb      	strb	r3, [r7, #11]
 8001296:	e788      	b.n	80011aa <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x52>
#endif
        }
        BUF_COUNTER++;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	e019      	b.n	80012dc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x184>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	bf94      	ite	ls
 80012b2:	2301      	movls	r3, #1
 80012b4:	2300      	movhi	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00f      	beq.n	80012dc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x184>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80012bc:	2260      	movs	r2, #96	; 0x60
 80012be:	2100      	movs	r1, #0
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x1a4>)
 80012c2:	f004 fb63 	bl	800598c <memset>
        BUF_COUNTER++;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x194>)
 80012d2:	801a      	strh	r2, [r3, #0]
 80012d4:	e002      	b.n	80012dc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x184>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80012d6:	bf00      	nop
 80012d8:	e000      	b.n	80012dc <_ZL30ARGB_TIM_DMADelayPulseHalfCpltP19__DMA_HandleTypeDef+0x184>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80012da:	bf00      	nop
    }
}
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000638 	.word	0x20000638
 80012e8:	20000560 	.word	0x20000560
 80012ec:	200000fc 	.word	0x200000fc
 80012f0:	20000038 	.word	0x20000038
 80012f4:	20000034 	.word	0x20000034
 80012f8:	20000035 	.word	0x20000035
 80012fc:	2000003c 	.word	0x2000003c

08001300 <_Z8Send_cmdhhh>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	460b      	mov	r3, r1
 800130c:	71bb      	strb	r3, [r7, #6]
 800130e:	4613      	mov	r3, r2
 8001310:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	b29a      	uxth	r2, r3
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b29a      	uxth	r2, r3
 800131e:	797b      	ldrb	r3, [r7, #5]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	b29b      	uxth	r3, r3
 8001326:	f203 1305 	addw	r3, r3, #261	; 0x105
 800132a:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	425b      	negs	r3, r3
 8001330:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	811a      	strh	r2, [r3, #8]
 800133e:	237e      	movs	r3, #126	; 0x7e
 8001340:	733b      	strb	r3, [r7, #12]
 8001342:	23ff      	movs	r3, #255	; 0xff
 8001344:	737b      	strb	r3, [r7, #13]
 8001346:	2306      	movs	r3, #6
 8001348:	73bb      	strb	r3, [r7, #14]
 800134a:	23ef      	movs	r3, #239	; 0xef
 800134c:	757b      	strb	r3, [r7, #21]
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	747b      	strb	r3, [r7, #17]
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	74bb      	strb	r3, [r7, #18]
 800135a:	8afb      	ldrh	r3, [r7, #22]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	74fb      	strb	r3, [r7, #19]
 8001364:	8afb      	ldrh	r3, [r7, #22]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800136a:	f107 010c 	add.w	r1, r7, #12
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	220a      	movs	r2, #10
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <_Z8Send_cmdhhh+0x84>)
 8001376:	f003 fe5b 	bl	8005030 <HAL_UART_Transmit>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000067c 	.word	0x2000067c

08001388 <_Z15DF_PlaySelectedt>:
	HAL_Delay(10);


}
void DF_PlaySelected(uint16_t song)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
	uint8_t num1 = song>>8;
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	73fb      	strb	r3, [r7, #15]
	uint8_t num2 = song;
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	73bb      	strb	r3, [r7, #14]
  Send_cmd(0x12,num1, num2);
 800139e:	7bba      	ldrb	r2, [r7, #14]
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4619      	mov	r1, r3
 80013a4:	2012      	movs	r0, #18
 80013a6:	f7ff ffab 	bl	8001300 <_Z8Send_cmdhhh>
  HAL_Delay(10);
 80013aa:	200a      	movs	r0, #10
 80013ac:	f001 f816 	bl	80023dc <HAL_Delay>
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_Z7DF_Inith>:


void DF_Init (uint8_t volume)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80013c2:	2202      	movs	r2, #2
 80013c4:	2100      	movs	r1, #0
 80013c6:	203f      	movs	r0, #63	; 0x3f
 80013c8:	f7ff ff9a 	bl	8001300 <_Z8Send_cmdhhh>
	HAL_Delay(100);
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f001 f805 	bl	80023dc <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	461a      	mov	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	2006      	movs	r0, #6
 80013da:	f7ff ff91 	bl	8001300 <_Z8Send_cmdhhh>
	HAL_Delay(100);
 80013de:	2064      	movs	r0, #100	; 0x64
 80013e0:	f000 fffc 	bl	80023dc <HAL_Delay>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_DMA_Init+0x38>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <MX_DMA_Init+0x38>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_DMA_Init+0x38>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2010      	movs	r0, #16
 8001410:	f001 f8df 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001414:	2010      	movs	r0, #16
 8001416:	f001 f8f8 	bl	800260a <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b46      	ldr	r3, [pc, #280]	; (8001558 <MX_GPIO_Init+0x130>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a45      	ldr	r2, [pc, #276]	; (8001558 <MX_GPIO_Init+0x130>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b43      	ldr	r3, [pc, #268]	; (8001558 <MX_GPIO_Init+0x130>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b40      	ldr	r3, [pc, #256]	; (8001558 <MX_GPIO_Init+0x130>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <MX_GPIO_Init+0x130>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <MX_GPIO_Init+0x130>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <MX_GPIO_Init+0x130>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a39      	ldr	r2, [pc, #228]	; (8001558 <MX_GPIO_Init+0x130>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <MX_GPIO_Init+0x130>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <MX_GPIO_Init+0x130>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a33      	ldr	r2, [pc, #204]	; (8001558 <MX_GPIO_Init+0x130>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <MX_GPIO_Init+0x130>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	482e      	ldr	r0, [pc, #184]	; (800155c <MX_GPIO_Init+0x134>)
 80014a4:	f001 fce6 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, stepper_dir_Pin|stepper_m2_Pin|stepper_m1_Pin|stepper_m0_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014ae:	482c      	ldr	r0, [pc, #176]	; (8001560 <MX_GPIO_Init+0x138>)
 80014b0:	f001 fce0 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, stepper_step_Pin|stepper_enable_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80014ba:	482a      	ldr	r0, [pc, #168]	; (8001564 <MX_GPIO_Init+0x13c>)
 80014bc:	f001 fcda 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4619      	mov	r1, r3
 80014d8:	4820      	ldr	r0, [pc, #128]	; (800155c <MX_GPIO_Init+0x134>)
 80014da:	f001 fb4f 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 80014de:	2310      	movs	r3, #16
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	481c      	ldr	r0, [pc, #112]	; (8001564 <MX_GPIO_Init+0x13c>)
 80014f2:	f001 fb43 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = stepper_dir_Pin|stepper_m2_Pin|stepper_m1_Pin|stepper_m0_Pin;
 80014f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2302      	movs	r3, #2
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	4814      	ldr	r0, [pc, #80]	; (8001560 <MX_GPIO_Init+0x138>)
 8001510:	f001 fb34 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = stepper_step_Pin;
 8001514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(stepper_step_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_GPIO_Init+0x13c>)
 800152e:	f001 fb25 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = stepper_enable_Pin;
 8001532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2302      	movs	r3, #2
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(stepper_enable_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_GPIO_Init+0x13c>)
 800154c:	f001 fb16 	bl	8002b7c <HAL_GPIO_Init>

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	40011000 	.word	0x40011000
 8001560:	40010c00 	.word	0x40010c00
 8001564:	40010800 	.word	0x40010800

08001568 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 fc97 	bl	8002ed8 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f94c 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000100 	.word	0x20000100
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <HAL_I2C_MspInit+0x74>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d125      	bne.n	8001630 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_I2C_MspInit+0x78>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_I2C_MspInit+0x78>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_I2C_MspInit+0x78>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = lcd_scl_Pin|lcd_sda_Pin;
 80015fc:	23c0      	movs	r3, #192	; 0xc0
 80015fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001600:	2312      	movs	r3, #18
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_I2C_MspInit+0x7c>)
 8001614:	f001 fab2 	bl	8002b7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_I2C_MspInit+0x78>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_I2C_MspInit+0x78>)
 800161e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001622:	61d3      	str	r3, [r2, #28]
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_I2C_MspInit+0x78>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005400 	.word	0x40005400
 800163c:	40021000 	.word	0x40021000
 8001640:	40010c00 	.word	0x40010c00

08001644 <logic>:
#include "ssd1306.h"
#include "DFPLAYER_MINI.h"
#include "ssd1306_tests.h"
uint16_t counter = 0;
void logic()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	counter = 0;
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <logic+0xa4>)
 800164a:	2200      	movs	r2, #0
 800164c:	801a      	strh	r2, [r3, #0]
	  ARGB_Init();
 800164e:	f7ff f96f 	bl	8000930 <_Z9ARGB_Initv>
	  ARGB_Clear();
 8001652:	f7ff f9e5 	bl	8000a20 <_Z10ARGB_Clearv>
	  while (ARGB_Show() != ARGB_OK);
 8001656:	f7ff fa75 	bl	8000b44 <_Z9ARGB_Showv>
 800165a:	4603      	mov	r3, r0
 800165c:	2b02      	cmp	r3, #2
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d000      	beq.n	800166c <logic+0x28>
 800166a:	e7f4      	b.n	8001656 <logic+0x12>
	  ssd1306_Init();
 800166c:	f000 f92c 	bl	80018c8 <ssd1306_Init>
	  ssd1306_Fill(Black);
 8001670:	2000      	movs	r0, #0
 8001672:	f000 f993 	bl	800199c <ssd1306_Fill>
	  //ssd1306_TestDrawBitmap();
	 DF_Init(30);
 8001676:	201e      	movs	r0, #30
 8001678:	f7ff fe9e 	bl	80013b8 <_Z7DF_Inith>

	 DF_PlaySelected(0x01);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fe83 	bl	8001388 <_Z15DF_PlaySelectedt>
	 //DF_Next();
	while (1)
	{
		//TIM2->CNT to odczyt enkodera
		ssd1306_SetCursor(0,0);
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f000 fad7 	bl	8001c38 <ssd1306_SetCursor>
		ssd1306_WriteString("test:1", Font_7x10, White);
 800168a:	4a18      	ldr	r2, [pc, #96]	; (80016ec <logic+0xa8>)
 800168c:	2301      	movs	r3, #1
 800168e:	ca06      	ldmia	r2, {r1, r2}
 8001690:	4817      	ldr	r0, [pc, #92]	; (80016f0 <logic+0xac>)
 8001692:	f000 faa5 	bl	8001be0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001696:	f000 f9a3 	bl	80019e0 <ssd1306_UpdateScreen>
		ARGB_FillRGB(255,0,0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	20ff      	movs	r0, #255	; 0xff
 80016a0:	f7ff fa2a 	bl	8000af8 <_Z12ARGB_FillRGBhhh>
		 while (ARGB_Show() != ARGB_OK);
 80016a4:	f7ff fa4e 	bl	8000b44 <_Z9ARGB_Showv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d000      	beq.n	80016ba <logic+0x76>
 80016b8:	e7f4      	b.n	80016a4 <logic+0x60>
		 //HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
		 delay(1000000);
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <logic+0xb0>)
 80016bc:	f000 f838 	bl	8001730 <delay>
		 ARGB_FillRGB(0,0,255);
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	2100      	movs	r1, #0
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fa17 	bl	8000af8 <_Z12ARGB_FillRGBhhh>
		 while (ARGB_Show() != ARGB_OK);
 80016ca:	f7ff fa3b 	bl	8000b44 <_Z9ARGB_Showv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d000      	beq.n	80016e0 <logic+0x9c>
 80016de:	e7f4      	b.n	80016ca <logic+0x86>
		 //HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
		 delay(1000000);
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <logic+0xb0>)
 80016e2:	f000 f825 	bl	8001730 <delay>
		ssd1306_SetCursor(0,0);
 80016e6:	e7cc      	b.n	8001682 <logic+0x3e>
 80016e8:	20000154 	.word	0x20000154
 80016ec:	20000004 	.word	0x20000004
 80016f0:	080059b4 	.word	0x080059b4
 80016f4:	000f4240 	.word	0x000f4240

080016f8 <handleInterrupt>:
	}
}
void handleInterrupt()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	counter++;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <handleInterrupt+0x30>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <handleInterrupt+0x30>)
 8001706:	801a      	strh	r2, [r3, #0]
	if (counter >= 1000)
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <handleInterrupt+0x30>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001710:	d307      	bcc.n	8001722 <handleInterrupt+0x2a>
	{
		counter = 0;
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <handleInterrupt+0x30>)
 8001714:	2200      	movs	r2, #0
 8001716:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <handleInterrupt+0x34>)
 800171e:	f001 fbc1 	bl	8002ea4 <HAL_GPIO_TogglePin>

	}
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000154 	.word	0x20000154
 800172c:	40011000 	.word	0x40011000

08001730 <delay>:
void delay (int a)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  volatile int i,j;
  for (i=0 ; i < a ; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	bfcc      	ite	gt
 8001744:	2301      	movgt	r3, #1
 8001746:	2300      	movle	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <delay+0x2c>
  {
     j++;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
  for (i=0 ; i < a ; i++)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e7ef      	b.n	800173c <delay+0xc>
  }
  return;
 800175c:	bf00      	nop
}
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176c:	f000 fdd4 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f816 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f7ff fe58 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001778:	f7ff fe38 	bl	80013ec <MX_DMA_Init>
  MX_I2C1_Init();
 800177c:	f7ff fef4 	bl	8001568 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001780:	f000 fd28 	bl	80021d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001784:	f000 fb0e 	bl	8001da4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001788:	f000 fbac 	bl	8001ee4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800178c:	f000 fbfe 	bl	8001f8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <main+0x34>)
 8001792:	f002 fc65 	bl	8004060 <HAL_TIM_Base_Start_IT>

  logic();
 8001796:	f7ff ff55 	bl	8001644 <logic>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800179a:	e7fe      	b.n	800179a <main+0x32>
 800179c:	200005f0 	.word	0x200005f0

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b090      	sub	sp, #64	; 0x40
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	2228      	movs	r2, #40	; 0x28
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 f8ec 	bl	800598c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d0:	2301      	movs	r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d4:	2302      	movs	r3, #2
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 ffcf 	bl	800378c <HAL_RCC_OscConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017f4:	f000 f82a 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2102      	movs	r1, #2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fa3c 	bl	8003c90 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800181e:	f000 f815 	bl	800184c <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3740      	adds	r7, #64	; 0x40
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3 )
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
	  handleInterrupt();
 800183c:	f7ff ff5c 	bl	80016f8 <handleInterrupt>
	  //HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);

  }
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200005f0 	.word	0x200005f0

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>

08001856 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
	...

08001864 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af04      	add	r7, sp, #16
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2301      	movs	r3, #1
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2301      	movs	r3, #1
 800187e:	2200      	movs	r2, #0
 8001880:	2178      	movs	r1, #120	; 0x78
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <ssd1306_WriteCommand+0x2c>)
 8001884:	f001 fc6c 	bl	8003160 <HAL_I2C_Mem_Write>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000100 	.word	0x20000100

08001894 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af04      	add	r7, sp, #16
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f04f 32ff 	mov.w	r2, #4294967295
 80018a6:	9202      	str	r2, [sp, #8]
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	2178      	movs	r1, #120	; 0x78
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <ssd1306_WriteData+0x30>)
 80018b6:	f001 fc53 	bl	8003160 <HAL_I2C_Mem_Write>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000100 	.word	0x20000100

080018c8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80018cc:	f7ff ffc3 	bl	8001856 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	f000 fd83 	bl	80023dc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f9d8 	bl	8001c8c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80018dc:	2020      	movs	r0, #32
 80018de:	f7ff ffc1 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ffbe 	bl	8001864 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018e8:	20b0      	movs	r0, #176	; 0xb0
 80018ea:	f7ff ffbb 	bl	8001864 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018ee:	20c8      	movs	r0, #200	; 0xc8
 80018f0:	f7ff ffb8 	bl	8001864 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff ffb5 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80018fa:	2010      	movs	r0, #16
 80018fc:	f7ff ffb2 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001900:	2040      	movs	r0, #64	; 0x40
 8001902:	f7ff ffaf 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001906:	20ff      	movs	r0, #255	; 0xff
 8001908:	f000 f9ae 	bl	8001c68 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800190c:	20a1      	movs	r0, #161	; 0xa1
 800190e:	f7ff ffa9 	bl	8001864 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001912:	20a6      	movs	r0, #166	; 0xa6
 8001914:	f7ff ffa6 	bl	8001864 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001918:	20a8      	movs	r0, #168	; 0xa8
 800191a:	f7ff ffa3 	bl	8001864 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800191e:	203f      	movs	r0, #63	; 0x3f
 8001920:	f7ff ffa0 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001924:	20a4      	movs	r0, #164	; 0xa4
 8001926:	f7ff ff9d 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800192a:	20d3      	movs	r0, #211	; 0xd3
 800192c:	f7ff ff9a 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ff97 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001936:	20d5      	movs	r0, #213	; 0xd5
 8001938:	f7ff ff94 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800193c:	20f0      	movs	r0, #240	; 0xf0
 800193e:	f7ff ff91 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001942:	20d9      	movs	r0, #217	; 0xd9
 8001944:	f7ff ff8e 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001948:	2022      	movs	r0, #34	; 0x22
 800194a:	f7ff ff8b 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800194e:	20da      	movs	r0, #218	; 0xda
 8001950:	f7ff ff88 	bl	8001864 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001954:	2012      	movs	r0, #18
 8001956:	f7ff ff85 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800195a:	20db      	movs	r0, #219	; 0xdb
 800195c:	f7ff ff82 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001960:	2020      	movs	r0, #32
 8001962:	f7ff ff7f 	bl	8001864 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001966:	208d      	movs	r0, #141	; 0x8d
 8001968:	f7ff ff7c 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800196c:	2014      	movs	r0, #20
 800196e:	f7ff ff79 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001972:	2001      	movs	r0, #1
 8001974:	f000 f98a 	bl	8001c8c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f80f 	bl	800199c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800197e:	f000 f82f 	bl	80019e0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <ssd1306_Init+0xd0>)
 8001984:	2200      	movs	r2, #0
 8001986:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <ssd1306_Init+0xd0>)
 800198a:	2200      	movs	r2, #0
 800198c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800198e:	4b02      	ldr	r3, [pc, #8]	; (8001998 <ssd1306_Init+0xd0>)
 8001990:	2201      	movs	r2, #1
 8001992:	711a      	strb	r2, [r3, #4]
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000558 	.word	0x20000558

0800199c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b0:	d20e      	bcs.n	80019d0 <ssd1306_Fill+0x34>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <ssd1306_Fill+0x20>
 80019b8:	2100      	movs	r1, #0
 80019ba:	e000      	b.n	80019be <ssd1306_Fill+0x22>
 80019bc:	21ff      	movs	r1, #255	; 0xff
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <ssd1306_Fill+0x40>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	460a      	mov	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e7ec      	b.n	80019aa <ssd1306_Fill+0xe>
    }
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000158 	.word	0x20000158

080019e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019e6:	2300      	movs	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d817      	bhi.n	8001a20 <ssd1306_UpdateScreen+0x40>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	3b50      	subs	r3, #80	; 0x50
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff34 	bl	8001864 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff ff31 	bl	8001864 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a02:	2010      	movs	r0, #16
 8001a04:	f7ff ff2e 	bl	8001864 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	01db      	lsls	r3, r3, #7
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <ssd1306_UpdateScreen+0x48>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff3e 	bl	8001894 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e7e4      	b.n	80019ea <ssd1306_UpdateScreen+0xa>
    }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000158 	.word	0x20000158

08001a2c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db3d      	blt.n	8001ac2 <ssd1306_DrawPixel+0x96>
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	2b3f      	cmp	r3, #63	; 0x3f
 8001a4a:	d83a      	bhi.n	8001ac2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001a4c:	797b      	ldrb	r3, [r7, #5]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11a      	bne.n	8001a88 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	08db      	lsrs	r3, r3, #3
 8001a58:	b2d8      	uxtb	r0, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	01db      	lsls	r3, r3, #7
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <ssd1306_DrawPixel+0xa0>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	b25a      	sxtb	r2, r3
 8001a66:	79bb      	ldrb	r3, [r7, #6]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b259      	sxtb	r1, r3
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	01db      	lsls	r3, r3, #7
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2c9      	uxtb	r1, r1
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <ssd1306_DrawPixel+0xa0>)
 8001a84:	54d1      	strb	r1, [r2, r3]
 8001a86:	e01d      	b.n	8001ac4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a88:	79fa      	ldrb	r2, [r7, #7]
 8001a8a:	79bb      	ldrb	r3, [r7, #6]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	b2d8      	uxtb	r0, r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	4413      	add	r3, r2
 8001a96:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <ssd1306_DrawPixel+0xa0>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b259      	sxtb	r1, r3
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	01db      	lsls	r3, r3, #7
 8001ab8:	4413      	add	r3, r2
 8001aba:	b2c9      	uxtb	r1, r1
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <ssd1306_DrawPixel+0xa0>)
 8001abe:	54d1      	strb	r1, [r2, r3]
 8001ac0:	e000      	b.n	8001ac4 <ssd1306_DrawPixel+0x98>
        return;
 8001ac2:	bf00      	nop
    }
}
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000158 	.word	0x20000158

08001ad0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	1d38      	adds	r0, r7, #4
 8001ada:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b1f      	cmp	r3, #31
 8001aec:	d902      	bls.n	8001af4 <ssd1306_WriteChar+0x24>
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b7e      	cmp	r3, #126	; 0x7e
 8001af2:	d901      	bls.n	8001af8 <ssd1306_WriteChar+0x28>
        return 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e06d      	b.n	8001bd4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	793b      	ldrb	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	2b80      	cmp	r3, #128	; 0x80
 8001b04:	dc06      	bgt.n	8001b14 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001b06:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001b08:	885b      	ldrh	r3, [r3, #2]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	797b      	ldrb	r3, [r7, #5]
 8001b0e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b10:	2b40      	cmp	r3, #64	; 0x40
 8001b12:	dd01      	ble.n	8001b18 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e05d      	b.n	8001bd4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	797b      	ldrb	r3, [r7, #5]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d24d      	bcs.n	8001bc2 <ssd1306_WriteChar+0xf2>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3b20      	subs	r3, #32
 8001b2c:	7979      	ldrb	r1, [r7, #5]
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	440b      	add	r3, r1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	793b      	ldrb	r3, [r7, #4]
 8001b46:	461a      	mov	r2, r3
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d235      	bcs.n	8001bba <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <ssd1306_WriteChar+0xb4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2d8      	uxtb	r0, r3
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001b6e:	885b      	ldrh	r3, [r3, #2]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	7bba      	ldrb	r2, [r7, #14]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff ff55 	bl	8001a2c <ssd1306_DrawPixel>
 8001b82:	e016      	b.n	8001bb2 <ssd1306_WriteChar+0xe2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2d8      	uxtb	r0, r3
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001b94:	885b      	ldrh	r3, [r3, #2]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2d9      	uxtb	r1, r3
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	f7ff ff3d 	bl	8001a2c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	e7c4      	b.n	8001b44 <ssd1306_WriteChar+0x74>
    for(i = 0; i < Font.FontHeight; i++) {
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	e7ac      	b.n	8001b1c <ssd1306_WriteChar+0x4c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	793b      	ldrb	r3, [r7, #4]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <ssd1306_WriteChar+0x10c>)
 8001bd0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3724      	adds	r7, #36	; 0x24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	20000558 	.word	0x20000558

08001be0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	1d38      	adds	r0, r7, #4
 8001bea:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bee:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d018      	beq.n	8001c2a <ssd1306_WriteString+0x4a>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	7818      	ldrb	r0, [r3, #0]
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	1d3a      	adds	r2, r7, #4
 8001c00:	ca06      	ldmia	r2, {r1, r2}
 8001c02:	f7ff ff65 	bl	8001ad0 <ssd1306_WriteChar>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <ssd1306_WriteString+0x42>
            // Char could not be written
            return *str;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	e005      	b.n	8001c2e <ssd1306_WriteString+0x4e>
        }
        
        // Next char
        str++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c28:	e7e2      	b.n	8001bf0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <ssd1306_SetCursor+0x2c>)
 8001c4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <ssd1306_SetCursor+0x2c>)
 8001c56:	805a      	strh	r2, [r3, #2]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000558 	.word	0x20000558

08001c68 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c72:	2381      	movs	r3, #129	; 0x81
 8001c74:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c76:	2081      	movs	r0, #129	; 0x81
 8001c78:	f7ff fdf4 	bl	8001864 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdf0 	bl	8001864 <ssd1306_WriteCommand>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c9c:	23af      	movs	r3, #175	; 0xaf
 8001c9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <ssd1306_SetDisplayOn+0x38>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	715a      	strb	r2, [r3, #5]
 8001ca6:	e004      	b.n	8001cb2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ca8:	23ae      	movs	r3, #174	; 0xae
 8001caa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <ssd1306_SetDisplayOn+0x38>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fdd5 	bl	8001864 <ssd1306_WriteCommand>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000558 	.word	0x20000558

08001cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_MspInit+0x40>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_MspInit+0x40>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6193      	str	r3, [r2, #24]
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_MspInit+0x40>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_MspInit+0x40>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_MspInit+0x40>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_MspInit+0x40>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler+0x4>

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f000 fb27 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <DMA1_Channel6_IRQHandler+0x10>)
 8001d62:	f000 fdd7 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000638 	.word	0x20000638

08001d70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM3_IRQHandler+0x10>)
 8001d76:	f002 fab9 	bl	80042ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200005f0 	.word	0x200005f0

08001d84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <USART2_IRQHandler+0x10>)
 8001d8a:	f003 f9e3 	bl	8005154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000067c 	.word	0x2000067c

08001d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim1_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b096      	sub	sp, #88	; 0x58
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	615a      	str	r2, [r3, #20]
 8001dd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2220      	movs	r2, #32
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fdd5 	bl	800598c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <MX_TIM1_Init+0x138>)
 8001de4:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <MX_TIM1_Init+0x13c>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001de8:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <MX_TIM1_Init+0x138>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <MX_TIM1_Init+0x138>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001df4:	4b39      	ldr	r3, [pc, #228]	; (8001edc <MX_TIM1_Init+0x138>)
 8001df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <MX_TIM1_Init+0x138>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e0e:	4833      	ldr	r0, [pc, #204]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e10:	f002 f8d6 	bl	8003fc0 <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e1a:	f7ff fd17 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e28:	4619      	mov	r1, r3
 8001e2a:	482c      	ldr	r0, [pc, #176]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e2c:	f002 fc24 	bl	8004678 <HAL_TIM_ConfigClockSource>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e36:	f7ff fd09 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e3a:	4828      	ldr	r0, [pc, #160]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e3c:	f002 f95c 	bl	80040f8 <HAL_TIM_PWM_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e46:	f7ff fd01 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e56:	4619      	mov	r1, r3
 8001e58:	4820      	ldr	r0, [pc, #128]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e5a:	f002 ffe1 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e64:	f7ff fcf2 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e68:	2360      	movs	r3, #96	; 0x60
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	2208      	movs	r2, #8
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4813      	ldr	r0, [pc, #76]	; (8001edc <MX_TIM1_Init+0x138>)
 8001e8e:	f002 fb35 	bl	80044fc <HAL_TIM_PWM_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e98:	f7ff fcd8 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <MX_TIM1_Init+0x138>)
 8001ec0:	f003 f806 	bl	8004ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001eca:	f7ff fcbf 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ece:	4803      	ldr	r0, [pc, #12]	; (8001edc <MX_TIM1_Init+0x138>)
 8001ed0:	f000 f94c 	bl	800216c <HAL_TIM_MspPostInit>

}
 8001ed4:	bf00      	nop
 8001ed6:	3758      	adds	r7, #88	; 0x58
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000560 	.word	0x20000560
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fd4a 	bl	800598c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f38:	230a      	movs	r3, #10
 8001f3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f40:	2301      	movs	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f48:	230a      	movs	r3, #10
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	480d      	ldr	r0, [pc, #52]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f54:	f002 f928 	bl	80041a8 <HAL_TIM_Encoder_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f5e:	f7ff fc75 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <MX_TIM2_Init+0xa4>)
 8001f70:	f002 ff56 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f7a:	f7ff fc67 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	3730      	adds	r7, #48	; 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200005a8 	.word	0x200005a8

08001f8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <MX_TIM3_Init+0x94>)
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <MX_TIM3_Init+0x98>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35999;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fbc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001fc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fd0:	f001 fff6 	bl	8003fc0 <HAL_TIM_Base_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001fda:	f7ff fc37 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_TIM3_Init+0x94>)
 8001fec:	f002 fb44 	bl	8004678 <HAL_TIM_ConfigClockSource>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ff6:	f7ff fc29 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002002:	463b      	mov	r3, r7
 8002004:	4619      	mov	r1, r3
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <MX_TIM3_Init+0x94>)
 8002008:	f002 ff0a 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002012:	f7ff fc1b 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200005f0 	.word	0x200005f0
 8002024:	40000400 	.word	0x40000400

08002028 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <HAL_TIM_Base_MspInit+0xb8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d134      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_TIM_Base_MspInit+0xbc>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002044:	6193      	str	r3, [r2, #24]
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002054:	4a25      	ldr	r2, [pc, #148]	; (80020ec <HAL_TIM_Base_MspInit+0xc4>)
 8002056:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800205a:	2210      	movs	r2, #16
 800205c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002078:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800207c:	2220      	movs	r2, #32
 800207e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002086:	4818      	ldr	r0, [pc, #96]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002088:	f000 fada 	bl	8002640 <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002092:	f7ff fbdb 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_TIM_Base_MspInit+0xc0>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020a2:	e018      	b.n	80020d6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_TIM_Base_MspInit+0xc8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d113      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_TIM_Base_MspInit+0xbc>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_TIM_Base_MspInit+0xbc>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_TIM_Base_MspInit+0xbc>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	201d      	movs	r0, #29
 80020cc:	f000 fa81 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d0:	201d      	movs	r0, #29
 80020d2:	f000 fa9a 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	20000638 	.word	0x20000638
 80020ec:	4002006c 	.word	0x4002006c
 80020f0:	40000400 	.word	0x40000400

080020f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d123      	bne.n	800215c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_TIM_Encoder_MspInit+0x70>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_TIM_Encoder_MspInit+0x70>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	61d3      	str	r3, [r2, #28]
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_TIM_Encoder_MspInit+0x70>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_TIM_Encoder_MspInit+0x70>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_TIM_Encoder_MspInit+0x70>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_TIM_Encoder_MspInit+0x70>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder_clk_Pin|encoder_dt_Pin;
 8002144:	2303      	movs	r3, #3
 8002146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4619      	mov	r1, r3
 8002156:	4804      	ldr	r0, [pc, #16]	; (8002168 <HAL_TIM_Encoder_MspInit+0x74>)
 8002158:	f000 fd10 	bl	8002b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800215c:	bf00      	nop
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40010800 	.word	0x40010800

0800216c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_TIM_MspPostInit+0x5c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d118      	bne.n	80021be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_TIM_MspPostInit+0x60>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_TIM_MspPostInit+0x60>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_TIM_MspPostInit+0x60>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = neopixel_data_Pin;
 80021a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(neopixel_data_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <HAL_TIM_MspPostInit+0x64>)
 80021ba:	f000 fcdf 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021be:	bf00      	nop
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40012c00 	.word	0x40012c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010800 	.word	0x40010800

080021d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_USART2_UART_Init+0x50>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 800220c:	f002 fec3 	bl	8004f96 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002216:	f7ff fb19 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000067c 	.word	0x2000067c
 8002224:	40004400 	.word	0x40004400

08002228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_UART_MspInit+0x98>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d137      	bne.n	80022b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_UART_MspInit+0x9c>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_UART_MspInit+0x9c>)
 800224e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002252:	61d3      	str	r3, [r2, #28]
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_UART_MspInit+0x9c>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_UART_MspInit+0x9c>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_UART_MspInit+0x9c>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_UART_MspInit+0x9c>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Dfplayer_TX_Pin;
 8002278:	2304      	movs	r3, #4
 800227a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Dfplayer_TX_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	4619      	mov	r1, r3
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <HAL_UART_MspInit+0xa0>)
 800228c:	f000 fc76 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dfplayer_RX_Pin;
 8002290:	2308      	movs	r3, #8
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Dfplayer_RX_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4809      	ldr	r0, [pc, #36]	; (80022c8 <HAL_UART_MspInit+0xa0>)
 80022a4:	f000 fc6a 	bl	8002b7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	2026      	movs	r0, #38	; 0x26
 80022ae:	f000 f990 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022b2:	2026      	movs	r0, #38	; 0x26
 80022b4:	f000 f9a9 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022b8:	bf00      	nop
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40004400 	.word	0x40004400
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010800 	.word	0x40010800

080022cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ce:	490d      	ldr	r1, [pc, #52]	; (8002304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d0:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e4:	4c0a      	ldr	r4, [pc, #40]	; (8002310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f2:	f7ff fd51 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f003 fb25 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fa:	f7ff fa35 	bl	8001768 <main>
  bx lr
 80022fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002308:	08006158 	.word	0x08006158
  ldr r2, =_sbss
 800230c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002310:	200006c4 	.word	0x200006c4

08002314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_2_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_Init+0x28>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_Init+0x28>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f947 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f000 f808 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff fcc8 	bl	8001cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x54>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f95f 	bl	8002626 <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f000 f927 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_InitTick+0x5c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	2000000c 	.word	0x2000000c
 800239c:	20000014 	.word	0x20000014
 80023a0:	20000010 	.word	0x20000010

080023a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_IncTick+0x20>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <HAL_IncTick+0x20>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	20000014 	.word	0x20000014
 80023c4:	200006c0 	.word	0x200006c0

080023c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_GetTick+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	200006c0 	.word	0x200006c0

080023dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d005      	beq.n	8002402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_Delay+0x44>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002402:	bf00      	nop
 8002404:	f7ff ffe0 	bl	80023c8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d8f7      	bhi.n	8002404 <HAL_Delay+0x28>
  {
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000014 	.word	0x20000014

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4906      	ldr	r1, [pc, #24]	; (80024bc <__NVIC_EnableIRQ+0x34>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f7ff ff90 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff2d 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff42 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff35 	bl	8002488 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e043      	b.n	80026de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_DMA_Init+0xa8>)
 800265e:	4413      	add	r3, r2
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_DMA_Init+0xac>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	009a      	lsls	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_DMA_Init+0xb0>)
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800268a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800268e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	bffdfff8 	.word	0xbffdfff8
 80026ec:	cccccccd 	.word	0xcccccccd
 80026f0:	40020000 	.word	0x40020000

080026f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Start_IT+0x20>
 8002710:	2302      	movs	r3, #2
 8002712:	e04a      	b.n	80027aa <HAL_DMA_Start_IT+0xb6>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002722:	2b01      	cmp	r3, #1
 8002724:	d13a      	bne.n	800279c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f9e8 	bl	8002b20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 020e 	orr.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e00f      	b.n	800278a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0204 	bic.w	r2, r2, #4
 8002778:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 020a 	orr.w	r2, r2, #10
 8002788:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e005      	b.n	80027a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d008      	beq.n	80027da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e020      	b.n	800281c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 020e 	bic.w	r2, r2, #14
 80027e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800283a:	2b02      	cmp	r3, #2
 800283c:	d005      	beq.n	800284a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2204      	movs	r2, #4
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e051      	b.n	80028ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 020e 	bic.w	r2, r2, #14
 8002858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_DMA_Abort_IT+0xd0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d029      	beq.n	80028c8 <HAL_DMA_Abort_IT+0xa0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_DMA_Abort_IT+0xd4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d022      	beq.n	80028c4 <HAL_DMA_Abort_IT+0x9c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_DMA_Abort_IT+0xd8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d01a      	beq.n	80028be <HAL_DMA_Abort_IT+0x96>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_DMA_Abort_IT+0xdc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d012      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x90>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_DMA_Abort_IT+0xe0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00a      	beq.n	80028b2 <HAL_DMA_Abort_IT+0x8a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_DMA_Abort_IT+0xe4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d102      	bne.n	80028ac <HAL_DMA_Abort_IT+0x84>
 80028a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028aa:	e00e      	b.n	80028ca <HAL_DMA_Abort_IT+0xa2>
 80028ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b0:	e00b      	b.n	80028ca <HAL_DMA_Abort_IT+0xa2>
 80028b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b6:	e008      	b.n	80028ca <HAL_DMA_Abort_IT+0xa2>
 80028b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028bc:	e005      	b.n	80028ca <HAL_DMA_Abort_IT+0xa2>
 80028be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c2:	e002      	b.n	80028ca <HAL_DMA_Abort_IT+0xa2>
 80028c4:	2310      	movs	r3, #16
 80028c6:	e000      	b.n	80028ca <HAL_DMA_Abort_IT+0xa2>
 80028c8:	2301      	movs	r3, #1
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_DMA_Abort_IT+0xe8>)
 80028cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
    } 
  }
  return status;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40020008 	.word	0x40020008
 80028fc:	4002001c 	.word	0x4002001c
 8002900:	40020030 	.word	0x40020030
 8002904:	40020044 	.word	0x40020044
 8002908:	40020058 	.word	0x40020058
 800290c:	4002006c 	.word	0x4002006c
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2204      	movs	r2, #4
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d04f      	beq.n	80029dc <HAL_DMA_IRQHandler+0xc8>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d04a      	beq.n	80029dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d029      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xae>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_DMA_IRQHandler+0x1f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_IRQHandler+0xaa>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <HAL_DMA_IRQHandler+0x1f8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xa4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a62      	ldr	r2, [pc, #392]	; (8002b10 <HAL_DMA_IRQHandler+0x1fc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d012      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x9e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a60      	ldr	r2, [pc, #384]	; (8002b14 <HAL_DMA_IRQHandler+0x200>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x98>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5f      	ldr	r2, [pc, #380]	; (8002b18 <HAL_DMA_IRQHandler+0x204>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d102      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x92>
 80029a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029a4:	e00e      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029aa:	e00b      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029b0:	e008      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b6:	e005      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029bc:	e002      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_IRQHandler+0xb0>
 80029c2:	2304      	movs	r3, #4
 80029c4:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_DMA_IRQHandler+0x208>)
 80029c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8094 	beq.w	8002afa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029da:	e08e      	b.n	8002afa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2202      	movs	r2, #2
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d056      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x186>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d051      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020a 	bic.w	r2, r2, #10
 8002a12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <HAL_DMA_IRQHandler+0x1f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x166>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <HAL_DMA_IRQHandler+0x1f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x162>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a35      	ldr	r2, [pc, #212]	; (8002b0c <HAL_DMA_IRQHandler+0x1f8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x15c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a34      	ldr	r2, [pc, #208]	; (8002b10 <HAL_DMA_IRQHandler+0x1fc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x156>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <HAL_DMA_IRQHandler+0x200>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x150>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a31      	ldr	r2, [pc, #196]	; (8002b18 <HAL_DMA_IRQHandler+0x204>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMA_IRQHandler+0x14a>
 8002a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a62:	e00b      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a68:	e008      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a6e:	e005      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a76:	2320      	movs	r3, #32
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_IRQHandler+0x168>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_DMA_IRQHandler+0x208>)
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d034      	beq.n	8002afa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a98:	e02f      	b.n	8002afa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d028      	beq.n	8002afc <HAL_DMA_IRQHandler+0x1e8>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 020e 	bic.w	r2, r2, #14
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
    }
  }
  return;
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
}
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40020008 	.word	0x40020008
 8002b08:	4002001c 	.word	0x4002001c
 8002b0c:	40020030 	.word	0x40020030
 8002b10:	40020044 	.word	0x40020044
 8002b14:	40020058 	.word	0x40020058
 8002b18:	4002006c 	.word	0x4002006c
 8002b1c:	40020000 	.word	0x40020000

08002b20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d108      	bne.n	8002b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b5e:	e007      	b.n	8002b70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8e:	e161      	b.n	8002e54 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b90:	2201      	movs	r2, #1
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 8150 	bne.w	8002e4e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a97      	ldr	r2, [pc, #604]	; (8002e10 <HAL_GPIO_Init+0x294>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d05e      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bb8:	4a95      	ldr	r2, [pc, #596]	; (8002e10 <HAL_GPIO_Init+0x294>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d875      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bbe:	4a95      	ldr	r2, [pc, #596]	; (8002e14 <HAL_GPIO_Init+0x298>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d058      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bc4:	4a93      	ldr	r2, [pc, #588]	; (8002e14 <HAL_GPIO_Init+0x298>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d86f      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bca:	4a93      	ldr	r2, [pc, #588]	; (8002e18 <HAL_GPIO_Init+0x29c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d052      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bd0:	4a91      	ldr	r2, [pc, #580]	; (8002e18 <HAL_GPIO_Init+0x29c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d869      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bd6:	4a91      	ldr	r2, [pc, #580]	; (8002e1c <HAL_GPIO_Init+0x2a0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04c      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002bdc:	4a8f      	ldr	r2, [pc, #572]	; (8002e1c <HAL_GPIO_Init+0x2a0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d863      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002be2:	4a8f      	ldr	r2, [pc, #572]	; (8002e20 <HAL_GPIO_Init+0x2a4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d046      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
 8002be8:	4a8d      	ldr	r2, [pc, #564]	; (8002e20 <HAL_GPIO_Init+0x2a4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d85d      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d82a      	bhi.n	8002c48 <HAL_GPIO_Init+0xcc>
 8002bf2:	2b12      	cmp	r3, #18
 8002bf4:	d859      	bhi.n	8002caa <HAL_GPIO_Init+0x12e>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_GPIO_Init+0x80>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c77 	.word	0x08002c77
 8002c00:	08002c51 	.word	0x08002c51
 8002c04:	08002c63 	.word	0x08002c63
 8002c08:	08002ca5 	.word	0x08002ca5
 8002c0c:	08002cab 	.word	0x08002cab
 8002c10:	08002cab 	.word	0x08002cab
 8002c14:	08002cab 	.word	0x08002cab
 8002c18:	08002cab 	.word	0x08002cab
 8002c1c:	08002cab 	.word	0x08002cab
 8002c20:	08002cab 	.word	0x08002cab
 8002c24:	08002cab 	.word	0x08002cab
 8002c28:	08002cab 	.word	0x08002cab
 8002c2c:	08002cab 	.word	0x08002cab
 8002c30:	08002cab 	.word	0x08002cab
 8002c34:	08002cab 	.word	0x08002cab
 8002c38:	08002cab 	.word	0x08002cab
 8002c3c:	08002cab 	.word	0x08002cab
 8002c40:	08002c59 	.word	0x08002c59
 8002c44:	08002c6d 	.word	0x08002c6d
 8002c48:	4a76      	ldr	r2, [pc, #472]	; (8002e24 <HAL_GPIO_Init+0x2a8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4e:	e02c      	b.n	8002caa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	623b      	str	r3, [r7, #32]
          break;
 8002c56:	e029      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	623b      	str	r3, [r7, #32]
          break;
 8002c60:	e024      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	3308      	adds	r3, #8
 8002c68:	623b      	str	r3, [r7, #32]
          break;
 8002c6a:	e01f      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	330c      	adds	r3, #12
 8002c72:	623b      	str	r3, [r7, #32]
          break;
 8002c74:	e01a      	b.n	8002cac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e013      	b.n	8002cac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	611a      	str	r2, [r3, #16]
          break;
 8002c96:	e009      	b.n	8002cac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	615a      	str	r2, [r3, #20]
          break;
 8002ca2:	e003      	b.n	8002cac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
          break;
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x130>
          break;
 8002caa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d801      	bhi.n	8002cb6 <HAL_GPIO_Init+0x13a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_Init+0x13e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2bff      	cmp	r3, #255	; 0xff
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_GPIO_Init+0x14c>
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	e002      	b.n	8002cce <HAL_GPIO_Init+0x152>
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3b08      	subs	r3, #8
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a9 	beq.w	8002e4e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cfc:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_GPIO_Init+0x2ac>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d14:	4a45      	ldr	r2, [pc, #276]	; (8002e2c <HAL_GPIO_Init+0x2b0>)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <HAL_GPIO_Init+0x2b4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00d      	beq.n	8002d5c <HAL_GPIO_Init+0x1e0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <HAL_GPIO_Init+0x2b8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <HAL_GPIO_Init+0x1dc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <HAL_GPIO_Init+0x2bc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_GPIO_Init+0x1d8>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e004      	b.n	8002d5e <HAL_GPIO_Init+0x1e2>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e002      	b.n	8002d5e <HAL_GPIO_Init+0x1e2>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_GPIO_Init+0x1e2>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	f002 0203 	and.w	r2, r2, #3
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	4093      	lsls	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d6e:	492f      	ldr	r1, [pc, #188]	; (8002e2c <HAL_GPIO_Init+0x2b0>)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d88:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	492b      	ldr	r1, [pc, #172]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4927      	ldr	r1, [pc, #156]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4921      	ldr	r1, [pc, #132]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	491d      	ldr	r1, [pc, #116]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dd8:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4917      	ldr	r1, [pc, #92]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4913      	ldr	r1, [pc, #76]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01f      	beq.n	8002e40 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	490d      	ldr	r1, [pc, #52]	; (8002e3c <HAL_GPIO_Init+0x2c0>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60cb      	str	r3, [r1, #12]
 8002e0c:	e01f      	b.n	8002e4e <HAL_GPIO_Init+0x2d2>
 8002e0e:	bf00      	nop
 8002e10:	10320000 	.word	0x10320000
 8002e14:	10310000 	.word	0x10310000
 8002e18:	10220000 	.word	0x10220000
 8002e1c:	10210000 	.word	0x10210000
 8002e20:	10120000 	.word	0x10120000
 8002e24:	10110000 	.word	0x10110000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40010800 	.word	0x40010800
 8002e34:	40010c00 	.word	0x40010c00
 8002e38:	40011000 	.word	0x40011000
 8002e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_GPIO_Init+0x2f4>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	4909      	ldr	r1, [pc, #36]	; (8002e70 <HAL_GPIO_Init+0x2f4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	3301      	adds	r3, #1
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f47f ae96 	bne.w	8002b90 <HAL_GPIO_Init+0x14>
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	372c      	adds	r7, #44	; 0x2c
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40010400 	.word	0x40010400

08002e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e84:	787b      	ldrb	r3, [r7, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e90:	e003      	b.n	8002e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	611a      	str	r2, [r3, #16]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	43d9      	mvns	r1, r3
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	611a      	str	r2, [r3, #16]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12b      	b.n	8003142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe fb60 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f000 fffa 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a81      	ldr	r2, [pc, #516]	; (800314c <HAL_I2C_Init+0x274>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	; (8003150 <HAL_I2C_Init+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7d      	ldr	r2, [pc, #500]	; (8003154 <HAL_I2C_Init+0x27c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e7      	b.n	8003142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a78      	ldr	r2, [pc, #480]	; (8003158 <HAL_I2C_Init+0x280>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	; (800314c <HAL_I2C_Init+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <HAL_I2C_Init+0xd4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	e009      	b.n	8002fc0 <HAL_I2C_Init+0xe8>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_I2C_Init+0x284>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	495c      	ldr	r1, [pc, #368]	; (800314c <HAL_I2C_Init+0x274>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d819      	bhi.n	8003014 <HAL_I2C_Init+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_I2C_Init+0x138>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e59      	subs	r1, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb1 f3f3 	udiv	r3, r1, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	e051      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003010:	2304      	movs	r3, #4
 8003012:	e04f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <HAL_I2C_Init+0x168>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e012      	b.n	8003066 <HAL_I2C_Init+0x18e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x196>
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_I2C_Init+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e58      	subs	r0, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	fbb0 f3f3 	udiv	r3, r0, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6809      	ldr	r1, [r1, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6911      	ldr	r1, [r2, #16]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	000186a0 	.word	0x000186a0
 8003150:	001e847f 	.word	0x001e847f
 8003154:	003d08ff 	.word	0x003d08ff
 8003158:	431bde83 	.word	0x431bde83
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800317a:	f7ff f925 	bl	80023c8 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 80d9 	bne.w	8003340 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2319      	movs	r3, #25
 8003194:	2201      	movs	r2, #1
 8003196:	496d      	ldr	r1, [pc, #436]	; (800334c <HAL_I2C_Mem_Write+0x1ec>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f971 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0cc      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x56>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0c5      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d007      	beq.n	80031dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2221      	movs	r2, #33	; 0x21
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <HAL_I2C_Mem_Write+0x1f0>)
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800321e:	88f8      	ldrh	r0, [r7, #6]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4603      	mov	r3, r0
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f890 	bl	8003354 <I2C_RequestMemoryWrite>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d052      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e081      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f9f2 	bl	800362c <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d11b      	bne.n	80032e0 <HAL_I2C_Mem_Write+0x180>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1aa      	bne.n	800323e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f9de 	bl	80036ae <I2C_WaitOnBTFFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d107      	bne.n	8003310 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e016      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000

08003354 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2200      	movs	r2, #0
 8003386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f878 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a4:	d103      	bne.n	80033ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e05f      	b.n	8003472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	492d      	ldr	r1, [pc, #180]	; (800347c <I2C_RequestMemoryWrite+0x128>)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f8b0 	bl	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e04c      	b.n	8003472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	6a39      	ldr	r1, [r7, #32]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f91a 	bl	800362c <I2C_WaitOnTXEFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b04      	cmp	r3, #4
 8003404:	d107      	bne.n	8003416 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e02b      	b.n	8003472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e021      	b.n	8003470 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	b29b      	uxth	r3, r3
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f8f4 	bl	800362c <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e005      	b.n	8003472 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	00010002 	.word	0x00010002

08003480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	e025      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d021      	beq.n	80034de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe ff95 	bl	80023c8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d116      	bne.n	80034de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e023      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10d      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	e00c      	b.n	800351e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d0b6      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800353c:	e051      	b.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d123      	bne.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0204 	orr.w	r2, r3, #4
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e046      	b.n	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d021      	beq.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fe ff13 	bl	80023c8 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e020      	b.n	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10c      	bne.n	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e00b      	b.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	43da      	mvns	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d18d      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003638:	e02d      	b.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f878 	bl	8003730 <I2C_IsAcknowledgeFailed>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e02d      	b.n	80036a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d021      	beq.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe feb9 	bl	80023c8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e007      	b.n	80036a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	2b80      	cmp	r3, #128	; 0x80
 80036a2:	d1ca      	bne.n	800363a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ba:	e02d      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f837 	bl	8003730 <I2C_IsAcknowledgeFailed>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e02d      	b.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d021      	beq.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d4:	f7fe fe78 	bl	80023c8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d1ca      	bne.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003746:	d11b      	bne.n	8003780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e272      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8087 	beq.w	80038ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ac:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d00c      	beq.n	80037d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037b8:	4b8f      	ldr	r3, [pc, #572]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d112      	bne.n	80037ea <HAL_RCC_OscConfig+0x5e>
 80037c4:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d10b      	bne.n	80037ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d2:	4b89      	ldr	r3, [pc, #548]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d06c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x12c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d168      	bne.n	80038b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e24c      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x76>
 80037f4:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	e02e      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7a      	ldr	r2, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800381c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e01d      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0xbc>
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a71      	ldr	r2, [pc, #452]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_OscConfig+0xd4>
 8003848:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6a      	ldr	r2, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a67      	ldr	r2, [pc, #412]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe fdae 	bl	80023c8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe fdaa 	bl	80023c8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e200      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0xe4>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fd9a 	bl	80023c8 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe fd96 	bl	80023c8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1ec      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x10c>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c6:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d11c      	bne.n	8003918 <HAL_RCC_OscConfig+0x18c>
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x176>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e1c0      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4939      	ldr	r1, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	e03a      	b.n	800398e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fd4f 	bl	80023c8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392e:	f7fe fd4b 	bl	80023c8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1a1      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4927      	ldr	r1, [pc, #156]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e015      	b.n	800398e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fd2e 	bl	80023c8 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fe fd2a 	bl	80023c8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e180      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03a      	beq.n	8003a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fe fd0e 	bl	80023c8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fe fd0a 	bl	80023c8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e160      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f000 fad8 	bl	8003f84 <RCC_Delay>
 80039d4:	e01c      	b.n	8003a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039dc:	f7fe fcf4 	bl	80023c8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e2:	e00f      	b.n	8003a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe fcf0 	bl	80023c8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d908      	bls.n	8003a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e146      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	42420000 	.word	0x42420000
 8003a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	4b92      	ldr	r3, [pc, #584]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e9      	bne.n	80039e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a6 	beq.w	8003b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a22:	4b8b      	ldr	r3, [pc, #556]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a87      	ldr	r2, [pc, #540]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4a:	4b82      	ldr	r3, [pc, #520]	; (8003c54 <HAL_RCC_OscConfig+0x4c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d118      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a56:	4b7f      	ldr	r3, [pc, #508]	; (8003c54 <HAL_RCC_OscConfig+0x4c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	; (8003c54 <HAL_RCC_OscConfig+0x4c8>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a62:	f7fe fcb1 	bl	80023c8 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6a:	f7fe fcad 	bl	80023c8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b64      	cmp	r3, #100	; 0x64
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e103      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x4c8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x312>
 8003a90:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a6e      	ldr	r2, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	e02d      	b.n	8003afa <HAL_RCC_OscConfig+0x36e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a69      	ldr	r2, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6213      	str	r3, [r2, #32]
 8003ab2:	4b67      	ldr	r3, [pc, #412]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a66      	ldr	r2, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6213      	str	r3, [r2, #32]
 8003abe:	e01c      	b.n	8003afa <HAL_RCC_OscConfig+0x36e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x356>
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4a5d      	ldr	r2, [pc, #372]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6213      	str	r3, [r2, #32]
 8003ae0:	e00b      	b.n	8003afa <HAL_RCC_OscConfig+0x36e>
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a5a      	ldr	r2, [pc, #360]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	4b58      	ldr	r3, [pc, #352]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a57      	ldr	r2, [pc, #348]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	f023 0304 	bic.w	r3, r3, #4
 8003af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d015      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7fe fc61 	bl	80023c8 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fe fc5d 	bl	80023c8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0b1      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ee      	beq.n	8003b0a <HAL_RCC_OscConfig+0x37e>
 8003b2c:	e014      	b.n	8003b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fc4b 	bl	80023c8 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fe fc47 	bl	80023c8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e09b      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4c:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ee      	bne.n	8003b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5e:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8087 	beq.w	8003c82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b74:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d061      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d146      	bne.n	8003c16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b88:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_RCC_OscConfig+0x4cc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fc1b 	bl	80023c8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fe fc17 	bl	80023c8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e06d      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba8:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d108      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bbe:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	4921      	ldr	r1, [pc, #132]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a19      	ldr	r1, [r3, #32]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	430b      	orrs	r3, r1
 8003be2:	491b      	ldr	r1, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x4cc>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fe fbeb 	bl	80023c8 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fbe7 	bl	80023c8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e03d      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x46a>
 8003c14:	e035      	b.n	8003c82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_RCC_OscConfig+0x4cc>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fbd4 	bl	80023c8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fe fbd0 	bl	80023c8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e026      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x498>
 8003c42:	e01e      	b.n	8003c82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e019      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_OscConfig+0x500>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0d0      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b6a      	ldr	r3, [pc, #424]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d910      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b67      	ldr	r3, [pc, #412]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	4965      	ldr	r1, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d040      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d115      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e073      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e06b      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4936      	ldr	r1, [pc, #216]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d80:	f7fe fb22 	bl	80023c8 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fe fb1e 	bl	80023c8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e053      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 020c 	and.w	r2, r3, #12
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d1eb      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db0:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d210      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 0207 	bic.w	r2, r3, #7
 8003dc6:	4922      	ldr	r1, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1cc>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1d0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fa80 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40022000 	.word	0x40022000
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08006138 	.word	0x08006138
 8003e5c:	2000000c 	.word	0x2000000c
 8003e60:	20000010 	.word	0x20000010

08003e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	b490      	push	{r4, r7}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e6c:	1d3c      	adds	r4, r7, #4
 8003e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e74:	f240 2301 	movw	r3, #513	; 0x201
 8003e78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e8e:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x46>
 8003ea2:	e02b      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ea6:	623b      	str	r3, [r7, #32]
      break;
 8003ea8:	e02b      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	0c9b      	lsrs	r3, r3, #18
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3328      	adds	r3, #40	; 0x28
 8003eb4:	443b      	add	r3, r7
 8003eb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d012      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0c5b      	lsrs	r3, r3, #17
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	3328      	adds	r3, #40	; 0x28
 8003ed2:	443b      	add	r3, r7
 8003ed4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ed8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ede:	fb03 f202 	mul.w	r2, r3, r2
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	e004      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	623b      	str	r3, [r7, #32]
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003efe:	623b      	str	r3, [r7, #32]
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	6a3b      	ldr	r3, [r7, #32]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3728      	adds	r7, #40	; 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc90      	pop	{r4, r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	080059bc 	.word	0x080059bc
 8003f14:	40021000 	.word	0x40021000
 8003f18:	007a1200 	.word	0x007a1200
 8003f1c:	003d0900 	.word	0x003d0900

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b02      	ldr	r3, [pc, #8]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	2000000c 	.word	0x2000000c

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff2 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08006148 	.word	0x08006148

08003f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f60:	f7ff ffde 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	0adb      	lsrs	r3, r3, #11
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08006148 	.word	0x08006148

08003f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <RCC_Delay+0x34>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <RCC_Delay+0x38>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0a5b      	lsrs	r3, r3, #9
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fa0:	bf00      	nop
  }
  while (Delay --);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1e5a      	subs	r2, r3, #1
 8003fa6:	60fa      	str	r2, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f9      	bne.n	8003fa0 <RCC_Delay+0x1c>
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	2000000c 	.word	0x2000000c
 8003fbc:	10624dd3 	.word	0x10624dd3

08003fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e041      	b.n	8004056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe f81e 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fc74 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e035      	b.n	80040e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIM_Base_Start_IT+0x90>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x4e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_Base_Start_IT+0x4e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_TIM_Base_Start_IT+0x94>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d111      	bne.n	80040d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d010      	beq.n	80040e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	e007      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400

080040f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e041      	b.n	800418e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f839 	bl	8004196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fbd8 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e093      	b.n	80042e4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fd ff8f 	bl	80020f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ec:	f023 0307 	bic.w	r3, r3, #7
 80041f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f000 fb75 	bl	80048ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	4313      	orrs	r3, r2
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004248:	f023 030c 	bic.w	r3, r3, #12
 800424c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	4313      	orrs	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	011a      	lsls	r2, r3, #4
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	031b      	lsls	r3, r3, #12
 8004278:	4313      	orrs	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4313      	orrs	r3, r2
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0202 	mvn.w	r2, #2
 8004318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fa6f 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa62 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fa71 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d122      	bne.n	800439c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d11b      	bne.n	800439c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0204 	mvn.w	r2, #4
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa45 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa38 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fa47 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0208 	mvn.w	r2, #8
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa1b 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa0e 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa1d 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2208      	movs	r2, #8
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9f1 	bl	8004812 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9e4 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9f3 	bl	8004824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0201 	mvn.w	r2, #1
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd f9de 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d10e      	bne.n	800449c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d107      	bne.n	800449c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fd74 	bl	8004f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9b7 	bl	8004836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0220 	mvn.w	r2, #32
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fd3f 	bl	8004f72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004512:	2302      	movs	r3, #2
 8004514:	e0ac      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f200 809f 	bhi.w	8004664 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004561 	.word	0x08004561
 8004530:	08004665 	.word	0x08004665
 8004534:	08004665 	.word	0x08004665
 8004538:	08004665 	.word	0x08004665
 800453c:	080045a1 	.word	0x080045a1
 8004540:	08004665 	.word	0x08004665
 8004544:	08004665 	.word	0x08004665
 8004548:	08004665 	.word	0x08004665
 800454c:	080045e3 	.word	0x080045e3
 8004550:	08004665 	.word	0x08004665
 8004554:	08004665 	.word	0x08004665
 8004558:	08004665 	.word	0x08004665
 800455c:	08004623 	.word	0x08004623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa18 	bl	800499c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	619a      	str	r2, [r3, #24]
      break;
 800459e:	e062      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa5e 	bl	8004a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
      break;
 80045e0:	e041      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 faa7 	bl	8004b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0208 	orr.w	r2, r2, #8
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
      break;
 8004620:	e021      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 faf1 	bl	8004c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	61da      	str	r2, [r3, #28]
      break;
 8004662:	e000      	b.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e0b3      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x180>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c8:	d03e      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0xd0>
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ce:	f200 8087 	bhi.w	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	f000 8085 	beq.w	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d87f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d01a      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xa2>
 80046e4:	2b70      	cmp	r3, #112	; 0x70
 80046e6:	d87b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d050      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x116>
 80046ec:	2b60      	cmp	r3, #96	; 0x60
 80046ee:	d877      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 80046f0:	2b50      	cmp	r3, #80	; 0x50
 80046f2:	d03c      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xf6>
 80046f4:	2b50      	cmp	r3, #80	; 0x50
 80046f6:	d873      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d058      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x136>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d86f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 8004700:	2b30      	cmp	r3, #48	; 0x30
 8004702:	d064      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x156>
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d86b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d060      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x156>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d867      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x156>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d05a      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004718:	e062      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6899      	ldr	r1, [r3, #8]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f000 fb36 	bl	8004d9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	609a      	str	r2, [r3, #8]
      break;
 8004746:	e04e      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6899      	ldr	r1, [r3, #8]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f000 fb1f 	bl	8004d9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476a:	609a      	str	r2, [r3, #8]
      break;
 800476c:	e03b      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	f000 fa96 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2150      	movs	r1, #80	; 0x50
 8004786:	4618      	mov	r0, r3
 8004788:	f000 faed 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 800478c:	e02b      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	461a      	mov	r2, r3
 800479c:	f000 fab4 	bl	8004d08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2160      	movs	r1, #96	; 0x60
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fadd 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 80047ac:	e01b      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 fa76 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 facd 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 80047cc:	e00b      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 fac4 	bl	8004d66 <TIM_ITRx_SetConfig>
        break;
 80047de:	e002      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d107      	bne.n	8004882 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004880:	e02a      	b.n	80048d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2202      	movs	r2, #2
 8004890:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800489a:	e01d      	b.n	80048d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d107      	bne.n	80048b6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2204      	movs	r2, #4
 80048aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b4:	e010      	b.n	80048d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2208      	movs	r2, #8
 80048c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ce:	e003      	b.n	80048d8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ffb5 	bl	8004848 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a25      	ldr	r2, [pc, #148]	; (8004994 <TIM_Base_SetConfig+0xa8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0x28>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0x28>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a22      	ldr	r2, [pc, #136]	; (8004998 <TIM_Base_SetConfig+0xac>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <TIM_Base_SetConfig+0xa8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x52>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x52>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <TIM_Base_SetConfig+0xac>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <TIM_Base_SetConfig+0xa8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d103      	bne.n	8004984 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	615a      	str	r2, [r3, #20]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400

0800499c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f023 0302 	bic.w	r3, r3, #2
 80049e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <TIM_OC1_SetConfig+0xc8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10c      	bne.n	8004a12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0308 	bic.w	r3, r3, #8
 80049fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <TIM_OC1_SetConfig+0xc8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d111      	bne.n	8004a3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00

08004a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0210 	bic.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0320 	bic.w	r3, r3, #32
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	; (8004b38 <TIM_OC2_SetConfig+0xd0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10d      	bne.n	8004ae4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <TIM_OC2_SetConfig+0xd0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d113      	bne.n	8004b14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00

08004b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <TIM_OC3_SetConfig+0xd0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10d      	bne.n	8004bb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <TIM_OC3_SetConfig+0xd0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d113      	bne.n	8004be6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00

08004c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	031b      	lsls	r3, r3, #12
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <TIM_OC4_SetConfig+0x98>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d109      	bne.n	8004c84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	019b      	lsls	r3, r3, #6
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00

08004cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 030a 	bic.w	r3, r3, #10
 8004ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 0210 	bic.w	r2, r3, #16
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	031b      	lsls	r3, r3, #12
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	621a      	str	r2, [r3, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 0307 	orr.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
 8004da6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	021a      	lsls	r2, r3, #8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	609a      	str	r2, [r3, #8]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2201      	movs	r2, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e041      	b.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d004      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40000400 	.word	0x40000400

08004ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e03d      	b.n	8004f68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e03f      	b.n	8005028 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fd f933 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2224      	movs	r2, #36	; 0x24
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fc24 	bl	8005828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ffe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800500e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	d17c      	bne.n	800514a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_UART_Transmit+0x2c>
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e075      	b.n	800514c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_UART_Transmit+0x3e>
 800506a:	2302      	movs	r3, #2
 800506c:	e06e      	b.n	800514c <HAL_UART_Transmit+0x11c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2221      	movs	r2, #33	; 0x21
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005084:	f7fd f9a0 	bl	80023c8 <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509e:	d108      	bne.n	80050b2 <HAL_UART_Transmit+0x82>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	e003      	b.n	80050ba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050c2:	e02a      	b.n	800511a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	2180      	movs	r1, #128	; 0x80
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fa10 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e036      	b.n	800514c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	3302      	adds	r3, #2
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e007      	b.n	800510c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	781a      	ldrb	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3301      	adds	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1cf      	bne.n	80050c4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	2140      	movs	r1, #64	; 0x40
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f9e0 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e006      	b.n	800514c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_UART_IRQHandler+0x52>
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa99 	bl	80056d6 <UART_Receive_IT>
      return;
 80051a4:	e17b      	b.n	800549e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80b1 	beq.w	8005310 <HAL_UART_IRQHandler+0x1bc>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <HAL_UART_IRQHandler+0x70>
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a6 	beq.w	8005310 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_UART_IRQHandler+0x90>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	f043 0201 	orr.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_UART_IRQHandler+0xb0>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f043 0202 	orr.w	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_UART_IRQHandler+0xd0>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00f      	beq.n	800524e <HAL_UART_IRQHandler+0xfa>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_UART_IRQHandler+0xee>
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 811e 	beq.w	8005494 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_UART_IRQHandler+0x11e>
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fa32 	bl	80056d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <HAL_UART_IRQHandler+0x146>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d031      	beq.n	80052fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f974 	bl	8005588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d023      	beq.n	80052f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695a      	ldr	r2, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d013      	beq.n	80052ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	4a76      	ldr	r2, [pc, #472]	; (80054a4 <HAL_UART_IRQHandler+0x350>)
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fd faa8 	bl	8002828 <HAL_DMA_Abort_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052e8:	4610      	mov	r0, r2
 80052ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ec:	e00e      	b.n	800530c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8ec 	bl	80054cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	e00a      	b.n	800530c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8e8 	bl	80054cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	e006      	b.n	800530c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8e4 	bl	80054cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800530a:	e0c3      	b.n	8005494 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	bf00      	nop
    return;
 800530e:	e0c1      	b.n	8005494 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	2b01      	cmp	r3, #1
 8005316:	f040 80a1 	bne.w	800545c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 809b 	beq.w	800545c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8095 	beq.w	800545c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d04e      	beq.n	80053f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005360:	8a3b      	ldrh	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8098 	beq.w	8005498 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800536c:	8a3a      	ldrh	r2, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	f080 8092 	bcs.w	8005498 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8a3a      	ldrh	r2, [r7, #16]
 8005378:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b20      	cmp	r3, #32
 8005382:	d02b      	beq.n	80053dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005392:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0210 	bic.w	r2, r2, #16
 80053d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd f9eb 	bl	80027b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f876 	bl	80054de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053f2:	e051      	b.n	8005498 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d047      	beq.n	800549c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800540c:	8a7b      	ldrh	r3, [r7, #18]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d044      	beq.n	800549c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005420:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0210 	bic.w	r2, r2, #16
 800544e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005450:	8a7b      	ldrh	r3, [r7, #18]
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f842 	bl	80054de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800545a:	e01f      	b.n	800549c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_UART_IRQHandler+0x324>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8c9 	bl	8005608 <UART_Transmit_IT>
    return;
 8005476:	e012      	b.n	800549e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <HAL_UART_IRQHandler+0x34a>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f90a 	bl	80056a6 <UART_EndTransmit_IT>
    return;
 8005492:	e004      	b.n	800549e <HAL_UART_IRQHandler+0x34a>
    return;
 8005494:	bf00      	nop
 8005496:	e002      	b.n	800549e <HAL_UART_IRQHandler+0x34a>
      return;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <HAL_UART_IRQHandler+0x34a>
      return;
 800549c:	bf00      	nop
  }
}
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	080055e1 	.word	0x080055e1

080054a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	460b      	mov	r3, r1
 80054e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	e02c      	b.n	8005560 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d028      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0x30>
 8005514:	f7fc ff58 	bl	80023c8 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d21d      	bcs.n	8005560 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005532:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e00f      	b.n	8005580 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	429a      	cmp	r2, r3
 800557c:	d0c3      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800559e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d107      	bne.n	80055c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0210 	bic.w	r2, r2, #16
 80055c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff ff66 	bl	80054cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b21      	cmp	r3, #33	; 0x21
 800561a:	d13e      	bne.n	800569a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d114      	bne.n	8005650 <UART_Transmit_IT+0x48>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d110      	bne.n	8005650 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]
 800564e:	e008      	b.n	8005662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6211      	str	r1, [r2, #32]
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29b      	uxth	r3, r3
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4619      	mov	r1, r3
 8005670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff feee 	bl	80054a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b22      	cmp	r3, #34	; 0x22
 80056e8:	f040 8099 	bne.w	800581e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d117      	bne.n	8005726 <UART_Receive_IT+0x50>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d113      	bne.n	8005726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	b29a      	uxth	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
 8005724:	e026      	b.n	8005774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d007      	beq.n	800574a <UART_Receive_IT+0x74>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <UART_Receive_IT+0x82>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e008      	b.n	800576a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005764:	b2da      	uxtb	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4619      	mov	r1, r3
 8005782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005784:	2b00      	cmp	r3, #0
 8005786:	d148      	bne.n	800581a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0220 	bic.w	r2, r2, #32
 8005796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d123      	bne.n	8005810 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0210 	bic.w	r2, r2, #16
 80057dc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d10a      	bne.n	8005802 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fe68 	bl	80054de <HAL_UARTEx_RxEventCallback>
 800580e:	e002      	b.n	8005816 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fe52 	bl	80054ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e002      	b.n	8005820 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005862:	f023 030c 	bic.w	r3, r3, #12
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	430b      	orrs	r3, r1
 800586e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <UART_SetConfig+0x114>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fb64 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	e002      	b.n	800589e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7fe fb4c 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 800589c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009a      	lsls	r2, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <UART_SetConfig+0x118>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	0119      	lsls	r1, r3, #4
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <UART_SetConfig+0x118>)
 80058d6:	fba3 0302 	umull	r0, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2064      	movs	r0, #100	; 0x64
 80058de:	fb00 f303 	mul.w	r3, r0, r3
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	3332      	adds	r3, #50	; 0x32
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <UART_SetConfig+0x118>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f4:	4419      	add	r1, r3
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009a      	lsls	r2, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	fbb2 f2f3 	udiv	r2, r2, r3
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <UART_SetConfig+0x118>)
 800590e:	fba3 0302 	umull	r0, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2064      	movs	r0, #100	; 0x64
 8005916:	fb00 f303 	mul.w	r3, r0, r3
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	4a07      	ldr	r2, [pc, #28]	; (8005940 <UART_SetConfig+0x118>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	440a      	add	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40013800 	.word	0x40013800
 8005940:	51eb851f 	.word	0x51eb851f

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	2600      	movs	r6, #0
 8005948:	4d0c      	ldr	r5, [pc, #48]	; (800597c <__libc_init_array+0x38>)
 800594a:	4c0d      	ldr	r4, [pc, #52]	; (8005980 <__libc_init_array+0x3c>)
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	f000 f822 	bl	800599c <_init>
 8005958:	2600      	movs	r6, #0
 800595a:	4d0a      	ldr	r5, [pc, #40]	; (8005984 <__libc_init_array+0x40>)
 800595c:	4c0a      	ldr	r4, [pc, #40]	; (8005988 <__libc_init_array+0x44>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f855 3b04 	ldr.w	r3, [r5], #4
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	f855 3b04 	ldr.w	r3, [r5], #4
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08006150 	.word	0x08006150
 8005980:	08006150 	.word	0x08006150
 8005984:	08006150 	.word	0x08006150
 8005988:	08006154 	.word	0x08006154

0800598c <memset>:
 800598c:	4603      	mov	r3, r0
 800598e:	4402      	add	r2, r0
 8005990:	4293      	cmp	r3, r2
 8005992:	d100      	bne.n	8005996 <memset+0xa>
 8005994:	4770      	bx	lr
 8005996:	f803 1b01 	strb.w	r1, [r3], #1
 800599a:	e7f9      	b.n	8005990 <memset+0x4>

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
